services:
  frontend:
    image: tantran308/remo-fe:${VERSION:-latest}
    env_file:
      - .env.prod
    ports:
      - 3001:3001
    networks:
      - remo
    restart: always

  backend:
    image: tantran308/remo-be:${VERSION:-latest}
    env_file:
      - .env.prod
    ports:
      - 3000:3000
    networks:
      - remo
    depends_on:
      - postgres
    restart: always

  postgres:
    image: postgres:16.3
    container_name: postgres
    ports:
      - 5432:5432
    volumes:
      - /database:/var/lib/postgresql/data
    env_file:
      - .env.prod
    networks:
      - remo
    restart: always

  adminer:
    image: adminer:4.8.1
    container_name: adminer
    ports:
      - 8080:8080
    env_file:
      - .env.prod
    networks:
      - remo
    restart: always

  nginx:
    image: jonasal/nginx-certbot:latest
    restart: unless-stopped
    env_file:
      - .env.prod
    depends_on:
      - backend
      - frontend
    ports:
      - 80:80
      - 443:443
    networks:
      - remo
    volumes:
      - ./webserver/certbot/conf:/etc/letsencrypt
      - ./webserver/nginx:/etc/nginx/templates

  postgres-llm:
    image: pgvector/pgvector:pg16
    container_name: postgres-llm
    healthcheck:
      test: pg_is_ready -U $POSTGRES_USER
      start_interval: 1s
      start_period: 5s
      interval: 5s
      retries: 5
    env_file:
      - .env.ai
    ports:
      - "5433:5432"
    networks:
      - remo
    volumes:
      - ./data:/var/lib/postgresql/data

  llm:
    build:
      context: ../RAG-LLM
      dockerfile: Dockerfile
    container_name: llm
    ports:
      - "8000:8000"
    env_file:
      - .env.ai
    networks:
      - remo
    volumes:
      - ./volume:/app-data

networks:
  remo:
    driver: bridge
